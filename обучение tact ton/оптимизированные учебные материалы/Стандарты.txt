Стандарты TON
TON Enhancement Proposals (TEPs) - это документы, которые описывают стандарты, рекомендации и улучшения для экосистемы TON. Они охватывают различные аспекты: от низкоуровневых протоколов до интерфейсов смарт-контрактов. Давайте разберем наиболее важные из них.

TEP-64: Token Data Standard

TEP-64 определяет стандарт метаданных для токенов TON, включая как фунгибельные (TIP-74), так и NFT (TIP-62). Основная цель - унифицировать представление метаданных, чтобы криптокошельки и клиентские приложения могли единообразно отображать информацию о токенах.
Стандарт определяет три варианта хранения метаданных:

полностью off-chain: смарт-контракт хранит только ссылку на внешний JSON файл
полностью on-chain: все метаданные хранятся в блокчейне
гибридный (рекомендуемый): базовые поля хранятся on-chain, расширенные - off-chain

Метаданные кодируются в виде словаря ключ-значение. Ключ - это sha256 хэш от названия поля. Значения сериализуются через TL-B схему.
TEP-64 также описывает рекомендуемый набор полей как для фунгибельных токенов, так и для NFT. Среди них: name (имя), description (описание), symbol (символ), decimals (число знаков после запятой), image (ссылка на изображение).

TEP-74: Fungible Token Standard (Jettons)

TEP-74 - это стандарт для фунгибельных токенов (jettons) в блокчейне TON. Его цель - обеспечить взаимодействие между различными реализациями токенов.
Ключевые особенности Jettons:

Каждый Jetton имеет смарт-контракт "minter", который управляет выпуском токенов и хранит общую информацию
Balances пользователей хранятся в отдельных смарт-контрактах "wallets"
Переводы реализованы через обмен сообщениями между wallets
Метаданные Jettons соответствуют TIP-64

Стандарт определяет схему сообщений для операций с Jettons:

Transfer - перевод токенов между пользователями
Burn - сжигание токенов пользователем
BurnNotification - уведомление от кошелька в minter о сжигании

Также контракты должны реализовать ряд get-методов:

get_wallet_address - адрес кошелька пользователя
get_jetton_data - общая информация о Jetton (total supply, админ, метаданные)

TEP-74 обратно совместим с более старым стандартом токенов TON - TIP-3.

TEP-62: NFT Standard

TEP-62 описывает стандарт невзаимозаменяемых токенов (NFT) для TON. NFT представляют право владения и могут свободно обмениваться между пользователями.
Основные идеи:

1 NFT = 1 смарт-контракт. Каждый NFT токен - отдельный смарт-контракт
NFT могут объединяться в коллекции. Коллекция NFT - тоже смарт-контракт
Коллекция хранит общие метаданные и код для всех своих NFT. Это позволяет экономить газ
Метаданные NFT соответствуют TIP-64
NFT могут менять владельца, но только целиком, по аналогии с физическими предметами

NFT контракт должен реализовывать несколько обязательных методов:

transfer(to, data) - перевод NFT к новому владельцу
get_nft_data() - получение информации о NFT (владелец, адрес коллекции, содержимое)

Коллекция NFT в свою очередь тоже имеет ряд методов:

get_collection_data() - общая информация о коллекции
get_nft_content(index) - получение объединенных метаданных для NFT по его индексу

TEP-62 предлагает сохранять право на получение роялти за автором коллекции. При продаже NFT определенный процент может автоматически отчисляться автору.

TEP-66: NFT Royalty Standard Extension

TEP-66 расширяет стандарт NFT (TIP-62) поддержкой роялти - вознаграждений, которые автоматически выплачиваются создателю NFT при его перепродаже.
Согласно стандарту, контракт коллекции NFT должен реализовать метод royalty_params(), который возвращает:

royalty_numerator и royalty_denominator - дробь, задающую процент роялти (например, 1/20 означает 5%)
royalty_address - адрес для выплаты роялти

При покупке NFT маркетплейс должен проверить royalty_params и отправить соответствующую часть суммы на royalty_address. Затем вызвать transfer у самого NFT.
TEP-66 не определяет строгий процент роялти, оставляя его на усмотрение создателей коллекций. Но рекомендуется придерживаться значений в 1-10% для здоровья экосистемы.
Стандарт роялти делает NFT более привлекательными для авторов, дает им возможность получать пассивный доход от своих творений.

TEP-115: TON Connect

TON Connect - это протокол для коммуникации между TON wallets и TON сайтами/приложениями (dapps). Он позволяет dapps запрашивать у пользователя подпись транзакций, при этом не имея доступа к приватным ключам.
Тем самым TON Connect реализует разделение ответственности:

dapps отвечают за UI и пользовательские функции
кошельки хранят ключи и подписывают транзакции

Это повышает безопасность и удобство использования. Пользователи могут взаимодействовать с разными dapps, не доверяя им свои ключи. А разработчики могут создавать dapps, не беспокоясь о безопасном хранении ключей.
Основные возможности TON Connect:

аутентификация пользователя на основе его адреса в блокчейне
запрос подписи транзакций
отправка произвольных запросов к смарт-контрактам от имени пользователя
шифрованные каналы между dapp и wallet

TON Connect использует асимметричное шифрование на основе пар ключей. Dapp и wallet согласуют общий секрет для шифрования через алгоритм Диффи-Хеллмана. Затем обмениваются сообщениями через публичный End-to-End Encryption Service.
Протокол допускает разные сценарии использования:

wallet в виде расширения для браузера
мобильный wallet
десктопный wallet
Это позволяет пользователю выбрать наиболее удобный для себя способ хранения ключей и взаимодействия с TON dapps.

TON Connect призван стать стандартом де-факто для всех приложений в экосистеме TON. Он значительно снижает порог входа для пользователей и разработчиков.

TEP-85: SBT (Soulbound Tokens) Contract

TEP-85 описывает стандарт "soulbound" токенов (SBT) - разновидности NFT, которые привязываются к владельцу и не могут быть переданы. SBT выдаются пользователю за какие-то достижения или в качестве подтверждения членства.
Варианты использования SBT:

дипломы об образовании
сертификаты о прохождении курсов
удостоверения личности
медали в играх
индикаторы репутации на форумах

Ключевые особенности SBT:

Нельзя передать. SBT навсегда ассоциируется с владельцем
Можно сжечь (уничтожить)
Поддерживают функцию "revoke" - аннулирование сертификата эмитентом
Позволяют доказывать владение (напр. для получения скидок)

Методы, которые должен реализовывать SBT контракт:

prove_ownership(addr, data) - доказательство владения, отправляет addr сообщение с данными из data
revoke() - отзыв токена эмитентом
destroy() - уничтожение токена владельцем

SBT открывают новые варианты применения блокчейна, становясь Web3 аналогом документов, удостоверяющих личность и достижения в реальном мире. С их помощью можно реализовать сложные схемы контроля доступа и поощрения участников на основе их репутации.
Итого
Подведем итог нашего обзора стандартов TON:

TEP-64 определяет единый формат метаданных для фунгибельных и невзаимозаменяемых токенов.
TEP-74 задает интерфейс для создания Jettons - фунгибельных токенов, функционально схожих с ERC20.
TEP-62 описывает архитектуру NFT в виде смарт-контрактов, которые могут группироваться в коллекции.
TEP-66 расширяет NFT поддержкой автоматических роялти авторам при перепродаже.
TEP-115 вводит универсальный протокол TON Connect для безопасного взаимодействия TON dapps и кошельков.
TEP-85 определяет стандарт необмениваемых soulbound токенов (SBT), которые представляют достижения и идентификацию пользователя.

При разработке смарт-контрактов и приложений на TON крайне рекомендуется следовать этим стандартам. Это обеспечит совместимость с существующей инфраструктурой (биржами, обозревателями, кошельками) и позволит пользователям легко взаимодействовать с вашим проектом.


Конечно, давайте углубимся в детали каждого из ключевых стандартов TON.

TEP-64: Token Data Standard
TEP-64 - это основополагающий стандарт, который унифицирует представление метаданных для всех типов токенов в блокчейне TON, включая фунгибельные токены (TIP-74), NFT (TIP-62) и Soulbound токены (TIP-85).

Стандарт предписывает хранить метаданные on-chain в виде словаря ключ-значение. Ключи в этом словаре - это sha256 хэши от названий полей метаданных. Например, хэш от строки "name" будет ключом для поля с именем токена. Такой подход обеспечивает уникальность ключей и экономит газ при хранении.

Значения в словаре метаданных сериализуются по специальной схеме TL-B. TEP-64 допускает несколько вариантов сериализации в зависимости от размера значения:

1. Если значение помещается в 1 ячейку, оно сериализуется как VarUInteger.
2. Если значение не помещается в 1 ячейку, используются два метода:
   - Snake формат: значение разбивается на чанки и каждый чанк записывается в отдельную ячейку в виде связного списка. Первый чанк содержит префикс 0x00.
   - Chunked формат: значение разбивается на чанки и каждый чанк записывается в словарь (mapping). Ключ в словаре - это порядковый номер чанка. Chunked формат использует префикс 0x01.

Такой подход оптимизирует хранение как маленьких, так и больших значений.

Помимо общих правил сериализации, TEP-64 определяет рекомендуемые поля метаданных для каждого типа токена:

Для фунгибельного токена (jetton):
- name - название токена
- symbol - символ токена
- description - описание токена
- image - URL на изображение токена
- decimals - число десятичных знаков (точность)

Для NFT:
- name - название NFT
- description - описание NFT
- image - URL на изображение NFT
- attributes - дополнительные атрибуты NFT (число владельцев, редкость и т.п.)

TEP-64 рекомендует по возможности хранить основные метаданные (name, symbol, decimals) в блокчейне, а большие по размеру (description, image) во внешнем хранилище, записывая в блокчейн только URL. Это экономит газ при развертывании токена.

Поскольку метаданные хранятся непосредственно в смарт-контракте токена, важно сделать их неизменяемыми после деплоя. Или, как минимум, позволять менять метаданные только администратору контракта.

При разработке кошелька или dapp, поддерживающих токены TON, крайне рекомендуется следовать TEP-64 при отображении информации о токене пользователю. Следует показывать symbol и decimals для jettons, и attributes для NFT. Это сделает интерфейсы приложений более консистентными и понятными.

В целом, TEP-64 обеспечивает гибкость в представлении метаданных токенов при сохранении обратной совместимости и экономии газа. Это фундаментальный стандарт, на основе которого построены более специфичные TEP-74, TEP-62 и TEP-85.

TEP-74: Fungible Token Standard (Jettons)
Jettons - это фунгибельные токены TON, стандартный интерфейс для которых описывается в TEP-74.

Ключевая особенность архитектуры Jettons - разделение смарт-контракта токена на два типа:
1. Jetton Minter - единый контракт, который деплоится владельцем токена. Он отвечает за эмиссию токенов и хранение общей информации, такой как общее количество токенов в обращении (total supply).
2. Jetton Wallet - индивидуальные контракты для каждого владельца токенов. Каждый кошелек хранит баланс конкретного пользователя.

Такое разделение ответственности между контрактами позволяет эффективно масштабироваться. Даже если у токена миллионы держателей, нагрузка распределяется между их индивидуальными кошельками, а не ложится на единый центральный контракт.

Взаимодействие между Minter и Wallets, а также между разными Wallets происходит через обмен сообщениями. TEP-74 стандартизирует формат этих сообщений.

Основные операции с Jettons:
1. Mint - выпуск новых токенов. Инициируется отправкой внутреннего сообщения на Minter.
2. Transfer - перевод токенов между пользователями. Отправитель посылает сообщение на свой Wallet, который списывает сумму перевода с его баланса и инструктирует Wallet получателя увеличить баланс. Если у получателя еще нет Wallet, он автоматически деплоится.
3. Burn - сжигание токенов пользователем. Wallet пользователя уменьшает его баланс и отправляет уведомление на Minter, который уменьшает общее число токенов в обороте.

Форматы сообщений для каждой операции детально описаны в стандарте, вплоть до схемы кодирования в TL-B.

Помимо обработки сообщений, контракты Jettons должны реализовывать несколько get-методов для удобного получения информации off-chain:
- get_wallet_address - возвращает адрес Wallet для данного пользователя
- get_jetton_data - возвращает общую информацию о токене (название, общее число токенов, админа)
- get_wallet_data - возвращает данные конкретного кошелька (баланс, владельца)

Метаданные Jettons (name, symbol, descripton и т.д.) должны следовать формату TEP-64.

При отправке токенов, пользователи могут прикреплять к переводу произвольные данные и комментарий. TEP-74 специфицирует формат этих данных. Комментарий может быть текстовым (отображается пользователю) или двоичным (машинная обработка). Это позволяет реализовать расширенные сценарии использования Jettons, например, атомарные свопы.

Стандарт также описывает рекомендуемую логику расчета стоимости газа для операций, чтобы избежать незапланированных потерь средств пользователей.

Для разработчиков кошельков и dapps важно корректно обрабатывать сообщения Jettons согласно спецификации. Рекомендуется повторно использовать существующие реализации, такие как библиотека ton-eth-bridge-token-contracts.

В целом, TEP-74 обеспечивает надежную, масштабируемую и расширяемую инфраструктуру фунгибельных токенов для экосистемы TON. Jettons являются удобной основой для создания разнообразных токенизированных активов: от криптовалют и стейблкоинов до токенов управления и синтетических активов.

TEP-62: Non-Fungible Token Standard (NFT)
TEP-62 - это стандарт не-взаимозаменяемых токенов (NFT) для блокчейна TON. NFT представляют право собственности на некий уникальный цифровой актив: произведение искусства, внутриигровой предмет, доменное имя и т.д.

Ключевые архитектурные решения TEP-62:
1. Одна NFT = один смарт-контракт. Каждый NFT реализуется в виде отдельного смарт-контракта. Это упрощает логику обработки и передачи NFT, а также расчет газа.
2. NFT объединяются в коллекции. Коллекция NFT - это отдельный контракт, который хранит общий код и метаданные для всех своих NFT. Такое разделение экономит газ и упрощает управление коллекциями.
3. В каждый момент времени у NFT может быть только один владелец. Совместное владение не допускается на уровне стандарта.

NFT контракт должен реализовывать следующий интерфейс:
- transfer(to, data) - передача NFT новому владельцу. Проверяет, что отправитель - текущий владелец, и меняет состояние контракта. Аргумент data позволяет передавать произвольные данные, интерпретация которых зависит от бизнес-логики.
- get_nft_data() - получение метаданных NFT. Включает в себя адрес владельца, адрес контракта коллекции, тип NFT (индивидуальный или часть коллекции), содержимое NFT.

Метаданные NFT следуют формату TEP-64 и могут включать в себя:
- name - название NFT
- description - описание NFT
- image - URL на изображение или другой медиа-файл
- attributes - дополнительные атрибуты, специфичные для случая использования

Контракт коллекции NFT дополнительно реализует методы:
- get_collection_data() - получение общей информации о коллекции (число NFT, контент, владелец)
- get_nft_content(index) - агрегированный контент конкретного NFT, принадлежащего коллекции. Он объединяет в себе индивидуальный контент из NFT контракта с общим контентом коллекции.

TEP-62 также описывает опциональный механизм роялти. При продаже NFT определенный процент от суммы может автоматически перечисляться автору коллекции. Это мотивирует создателей контента выпускать новые NFT.

Для корректной имплементации роялти, коллекция должна предоставлять метод royalty_params(), возвращающий данные для вычисления роялти (процент и адрес выплаты). Маркетплейсы NFT, совместимые с TEP-62, должны вызывать этот метод при продаже токена и посылать соответствующую часть дохода на указанный адрес.

Как и в случае с Jettons, передача NFT между пользователями происходит посредством обмена сообщениями между контрактами. Стандарт детализует формат и схему обработки этих сообщений.

При разработке NFT рекомендуется наследовать их контракты от эталонной реализации TEP-62. Это гарантирует совместимость с инфраструктурой NFT: маркетплейсами, обозревателями, кошельками.

Для демонстрационных целей можно деплоить NFT и коллекции прямо из Tact IDE, используя шаблонные контракты.

В целом, TEP-62 привносит проверенный временем подход NFT стандарта ERC-721 из Ethereum в блокчейн TON. Он нацелен на обеспечение максимальной гибкости для разработчиков при сохранении совместимости в рамках экосистемы. С ростом сообщества ожидается появление широкого спектра NFT-powered приложений в TON, от торговых площадок цифрового искусства до сложных игр.

TEP-85: SBT (Soulbound Tokens) Contract
TEP-85 - это стандарт "soulbound" токенов (SBT) для TON. SBT представляют из себя особый тип NFT, главное отличие которых - неотчуждаемость. SBT привязываются к конкретному адресу (аккаунту) пользователя и не могут быть переданы кому-либо еще.

Основная идея SBT - представлять цифровую идентичность и достижения человека в том или ином сообществе. Например:
- Диплом об окончании университета
- Подтверждение прохождения онлайн курса
- Членство в DAO
- Рейтинг репутации на форуме
- Достижения ("ачивки") в игре

SBT токены являются двоичными маркерами принадлежности к группе или обладания определенным статусом. По сути они являются Web3 аналогом документов, удостоверяющих личность, только в контексте конкретной платформы или сообщества.

Ключевые свойства SBT согласно TEP-85:
1. Не могут быть переданы. В отличие от обычных NFT, SBT не имеют функции transfer. Они навсегда привязываются к аккаунту, которому выданы. Это гарантирует подлинность заявляемых достижений и репутации.
2. Могут быть аннулированы эмитентом. Организация, которая выпустила SBT, имеет право аннулировать его в одностороннем порядке. Например, университет может отозвать диплом если выяснилось, что студент списывал.
3. Могут быть добровольно "сожжены" (уничтожены) владельцем. Если пользователь больше не хочет ассоциироваться с сообществом, он может в любой момент отказаться от SBT.

Контракт, реализующий TEP-85, должен поддерживать следующие методы:
- get_nft_data() - возвращает общие метаданные токена, аналогично обычному NFT согласно TEP-62.
- get_authority_address() - возвращает адрес аккаунта, который имеет право отозвать (аннулировать) токен. Для SBT, которые не могут быть отозваны, возвращает нулевой ад