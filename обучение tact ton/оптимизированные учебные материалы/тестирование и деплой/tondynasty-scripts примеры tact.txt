deployFNFT.ts
import { beginCell, toNano } from 'ton-core';
import { FNFTCollection, RoyaltyParams } from '../wrappers/FNFT_FNFTCollection';
import { NetworkProvider } from '@ton-community/blueprint';
import { buildNFTCollectionContent } from '../utils/ton-tep64';

const OFFCHAIN_TAG = 0x01;
const BASE_URL = 'https://s.getgems.io/nft-staging/c/628f6ab8077060a7a8d52d63/';

export async function run(provider: NetworkProvider) {
    const deployer = provider.sender();
    console.log('Deploying contract with deployer address', deployer.address);
    const collectionContent = buildNFTCollectionContent();

    const royaltyParams: RoyaltyParams = {
        $$type: 'RoyaltyParams',
        numerator: 1n,
        denominator: 120n,
        destination: deployer.address!,
    };
    const nftCollection = provider.open(
        await FNFTCollection.fromInit(deployer.address!, collectionContent, royaltyParams)
    );
    await nftCollection.send(
        provider.sender(),
        {
            value: toNano('0.05'),
        },
        {
            $$type: 'Deploy',
            queryId: 0n,
        }
    );
    await provider.waitForDeploy(nftCollection.address);
}

scripts/deployJetton.ts
import { sha256_sync } from 'ton-crypto';
import { Cell, Dictionary, beginCell, toNano } from 'ton-core';
import { ExampleJettonMaster } from '../wrappers/JettonExample_ExampleJettonMaster';
import { NetworkProvider } from '@ton-community/blueprint';
import { buildJettonContent } from '../utils/ton-tep64';

export async function run(provider: NetworkProvider) {
    const deployer = provider.sender();
    console.log('Deploying contract with deployer address', deployer.address);
    const jettonContent = buildJettonContent({
        name: 'AlanKingdom',
        description: 'Alankingdom is a decentralized kingdom, where you can create your own kingdom and become a king.',
        symbol: 'ALL',
        decimals: '9',
        image: 'https://avatars.githubusercontent.com/u/144251015?s=400&u=a25dfca41bdc6467d9783f5225c93f60e1513630&v=4',
    });
    const jettonMaster = provider.open(await ExampleJettonMaster.fromInit(deployer.address!, jettonContent));
    await jettonMaster.send(
        provider.sender(),
        {
            value: toNano('0.1'),
        },
        {
            $$type: 'Deploy',
            queryId: 0n,
        }
    );

    await provider.waitForDeploy(jettonMaster.address);
}

deployNFTCollection.ts
import { beginCell, toNano } from 'ton-core';
import { ExampleNFTCollection, RoyaltyParams } from '../wrappers/NFTExample_ExampleNFTCollection';
import { NetworkProvider } from '@ton-community/blueprint';

const OFFCHAIN_TAG = 0x01;
const BASE_URL = 'https://s.getgems.io/nft-staging/c/628f6ab8077060a7a8d52d63/';

export async function run(provider: NetworkProvider) {
    const deployer = provider.sender();
    console.log('Deploying contract with deployer address', deployer.address);
    const collectionContent = beginCell().storeInt(OFFCHAIN_TAG, 8).storeStringRefTail(BASE_URL).endCell();
    const royaltyParams: RoyaltyParams = {
        $$type: 'RoyaltyParams',
        numerator: 3n,
        denominator: 100n,
        destination: deployer.address!,
    };
    const nftCollection = provider.open(
        await ExampleNFTCollection.fromInit(deployer.address!, collectionContent, royaltyParams)
    );

    await nftCollection.send(
        provider.sender(),
        {
            value: toNano('0.05'),
        },
        {
            $$type: 'Deploy',
            queryId: 0n,
        }
    );

    await provider.waitForDeploy(nftCollection.address);
}

scripts/deployNFTEnforceRoyalty.ts
import { beginCell, toNano } from 'ton-core';
import { FNFTCollection, RoyaltyParams } from '../wrappers/FNFTEnforce_FNFTCollection';
import { NetworkProvider } from '@ton-community/blueprint';
import { buildNFTCollectionContent } from '../utils/ton-tep64';

export async function run(provider: NetworkProvider) {
    const deployer = provider.sender();
    console.log('Deploying contract with deployer address', deployer.address);
    const collectionContent = buildNFTCollectionContent();
    const royaltyParams: RoyaltyParams = {
        $$type: 'RoyaltyParams',
        numerator: 2n,
        denominator: 100n,
        destination: deployer.address!,
    };
    const nftCollection = provider.open(
        await FNFTCollection.fromInit(deployer.address!, collectionContent, royaltyParams, deployer.address!)
    );
    await nftCollection.send(
        provider.sender(),
        {
            value: toNano('0.5'),
        },
        {
            $$type: 'Deploy',
            queryId: 0n,
        }
    );
    await provider.waitForDeploy(nftCollection.address);
}

scripts/deployNftAuctionExample.ts
import { toNano } from 'ton-core';
import { NftAuctionExample } from '../wrappers/NftAuctionExample';
import { NetworkProvider } from '@ton-community/blueprint';

export async function run(provider: NetworkProvider) {
    const nftAuctionExample = provider.open(await NftAuctionExample.fromInit());

    await nftAuctionExample.send(
        provider.sender(),
        {
            value: toNano('0.05'),
        },
        {
            $$type: 'Deploy',
            queryId: 0n,
        }
    );

    await provider.waitForDeploy(nftAuctionExample.address);

    // run methods on `nftAuctionExample`
}
