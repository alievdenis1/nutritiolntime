–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Blueprint –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤

üìö–ß—Ç–µ–Ω–∏–µ –ó–∞–º–µ—Ç–æ–∫
–ö–∞–∫ –≤—ã –ø–æ–º–Ω–∏—Ç–µ, –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ –Ω–∞—à–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é FunC –º—ã –±—ã—Å—Ç—Ä–æ –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –æ—Ç–ª–∏—á–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º Blueprint.

Blueprint –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π TonTech, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –§–æ–Ω–¥–æ–º TON. –ú—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–∞—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∫—Ä–∏–ø—Ç—ã —Å –Ω—É–ª—è, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–Ω–∏–º–∞–µ—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Blueprint.

–î–∞–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—á–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–π –∏–∑ –≤–∞—à–∏—Ö –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å–æ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã:

npm create ton@latest
–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Blueprint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –≤–∞—Å —Å –∫–æ–¥–æ–º –¥–ª—è –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø—Ä–æ—à–ª–∏ –≤ –≥–ª–∞–≤–µ 3, –æ—Ö–≤–∞—Ç—ã–≤–∞—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.

–í —ç—Ç–æ–π –≥–ª–∞–≤–µ –º—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–µ–º–Ω–æ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –ø–æ—ç—Ç–æ–º—É –æ–Ω –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –ø—Ä–æ–µ–∫—Ç—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é Blueprint. –ê –∏–º–µ–Ω–Ω–æ, –º—ã —Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–µ–º–Ω–æ–≥–æ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—à –ø—Ä–æ–µ–∫—Ç —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –æ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ Blueprint.

–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –≤ Blueprint
–ü—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ, –Ω–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—à —Ñ–∞–π–ª package.json. –° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –º—ã –æ—Å—Ç–∞–≤–∏–º —Ç–∞–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–µ—Å—Ç. –ú—ã –¥–µ–ª–∞–µ–º —ç—Ç–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ, –∫–∞–∫ —É–ø–æ–º–∏–Ω–∞–ª–æ—Å—å —Ä–∞–Ω–µ–µ, –∫–æ–º–ø–∏–ª—è—Ü–∏—è –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏, –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–∑ Blueprint.

–°–∫—Ä–∏–ø—Ç—ã, —á–∞—Å—Ç—å –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ package.json —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:

"scripts": {
"test": "jest",
}
–û–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ –º—ã –∑–∞–ø—É—Å—Ç–∏–º –∫–æ–º–∞–Ω–¥—É yarn test —Å–µ–π—á–∞—Å - –æ–Ω–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç —Ç–µ—Å—Ç—ã –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–º–ø–∏–ª—è—Ü–∏–∏. –î–∞–≤–∞–π—Ç–µ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–º.

–ö–∞–∫ —è —É–∂–µ —É–ø–æ–º–∏–Ω–∞–ª, –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–±–æ—Ä –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –æ—Ç Blueprint, —Ç–∞–∫ —á—Ç–æ –¥–∞–≤–∞–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏–º —ç—Ç—É —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É:

yarn add @ton/blueprint --dev
–í –Ω–∞—à–µ–º —Ñ–∞–π–ª–µ tests/main.spec.ts –º—ã –¥–æ–ª–∂–Ω—ã –≤–Ω–µ—Å—Ç–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–∞–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –í–æ—Ç –∫–∞–∫ —ç—Ç–æ –≤—ã–≥–ª—è–¥–µ–ª–æ —Ä–∞–Ω—å—à–µ (–º—ã —Ü–∏—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å, –ø–µ—Ä–µ–¥ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç–µ—Å—Ç–∞–º–∏):

–ú—ã —Å–¥–µ–ª–∞–µ–º 3 –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:

–§—É–Ω–∫—Ü–∏—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ @ton-blueprint
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ö—É–∫ beforeAll —à—É—Ç–∫–∏, —á—Ç–æ–±—ã —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—à –∫–æ–¥ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —è—á–µ–π–∫—É –∫–æ–¥–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ö—É–∫–æ–≤ –∏ —Ç–µ—Å—Ç–æ–≤
–û–±–Ω–æ–≤–∏—Ç–µ —Ö—É–∫ beforeEach, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —è—á–µ–π–∫—É –∫–æ–¥–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∫—Ä—é—á–∫–æ–º beforeAll.
–í–æ—Ç –∫–∞–∫ –Ω–∞—à –∫–æ–¥ –±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è —ç—Ç–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π:

–ú—ã –≤–Ω–æ—Å–∏–º —ç—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã –≤—ã –ø—Ä–∏–≤—ã–∫–ª–∏ –∫ –∫–æ–¥—É, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã –∑–∞–ø—É—Å—Ç–∏—Ç–µ npm create ton@latest. –ú—ã –ø–µ—Ä–µ–Ω–æ—Å–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É Blueprint.
–¢–µ–º –Ω–µ –º–µ–Ω–µ–µ, –Ω–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å Blueprint –µ—â–µ –æ–¥–Ω—É –≤–µ—â—å - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞. –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ wrappers –∏ –Ω–∞–∑–æ–≤–∏—Ç–µ –µ–≥–æ MainContract.compile.ts. –í–æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞:

import { CompilerConfig } from "@ton/blueprint";

export const compile: CompilerConfig = {
targets: ["contracts/main.fc"],
};
–ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ (scripts/compile.ts) –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç yarn –≤ –∫–æ—Ä–Ω–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –í—ã —É–≤–∏–¥–∏—Ç–µ, —á—Ç–æ –Ω–∞—à–∏ —Ç–µ—Å—Ç—ã —Ç–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –¥–æ–ª–∂–Ω—ã–º –æ–±—Ä–∞–∑–æ–º! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!

–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ Blueprint
–°–ª–µ–¥—É—é—â–µ–µ, —á—Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, —ç—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—à —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è —Å—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Blueprint. –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–∞–∑ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ - –º—ã —Å–æ–±–∏—Ä–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à—É –æ–±–µ—Ä—Ç–∫—É MainContract –∏ –µ–µ –º–µ—Ç–æ–¥ .createFromConfig. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –º—ã –º–æ–∂–µ–º –ª–µ–≥–∫–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–µ—Ä–µ–¥ –µ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º.

Blueprint –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è. –û–Ω –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç –Ω–∞—Å –≤—ã–±—Ä–∞—Ç—å —Å–µ—Ç—å (testnet/mainnet), –∞ —Ç–∞–∫–∂–µ —Ç–∏–ø –∫–æ—à–µ–ª—å–∫–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –º—ã —Ö–æ—Ç–∏–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞—à –∫–æ–Ω—Ç—Ä–∞–∫—Ç. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—á–µ–Ω—å —É–¥–æ–±–Ω–∞ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã —á–∞—Å—Ç–æ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ—Ç–µ.

–û–¥–Ω–∞ –≤–µ—â—å, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –Ω–∞—à–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è, —ç—Ç–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –Ω–∞ –Ω–∞—à–µ–π –æ–±–µ—Ä—Ç–∫–µ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º sendDeploy. –ö–∞–∫ –≤—ã –ø–æ–º–Ω–∏—Ç–µ, –Ω–∞–º –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–µ—Ä—Ç–∫—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∞—à–∏–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º. –í–æ—Ç –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ–¥ –Ω–∞—à–µ–≥–æ –º–µ—Ç–æ–¥–∞:

async sendDeploy(provider: ContractProvider, via: Sender, value: bigint) {
await provider.internal(via, {
value,
sendMode: SendMode.PAY_GAS_SEPARATELY,
body: beginCell().endCell(),
});
}
–ö–∞–∫ –≤—ã –ø–æ–º–Ω–∏—Ç–µ, —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–∞–∫ –∂–µ –ø—Ä–æ—Å—Ç–æ, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∫–æ–¥ –Ω–∞ –∑–∞—Ä–∞–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å. –í –≥–ª–∞–≤–µ 3 –º—ã —Å–æ—á–∏–Ω—è–ª–∏ —ç—Ç–æ –≤—Ä—É—á–Ω—É—é, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –≥–ª—É–±–æ–∫–æ –ø–æ–Ω—è—Ç—å, –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç. –¢–µ–ø–µ—Ä—å, –≤ —Ü–µ–ª—è—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, –º—ã –ø–µ—Ä–µ–¥–µ–ª–∏—Ä—É–µ–º —ç—Ç–æ –≤ –Ω–∞—à—É –æ–±–µ—Ä—Ç–∫—É –∏ Blueprint.

–ú—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–∏–º –Ω–∞—à –∫–æ–¥ –Ω–æ–≤—ã–º, —á—Ç–æ–±—ã –æ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Blueprint.

–í–æ—Ç –∫–∞–∫ –≤—ã–≥–ª—è–¥—è—Ç –Ω–∞—à–∏ —Å–∫—Ä–∏–ø—Ç—ã scripts/deploy.ts —Å–µ–π—á–∞—Å:

–ö–∞–∫ –≤—ã –º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å - —ç—Ç–æ –Ω–∞–º–Ω–æ–≥–æ –ø—Ä–æ—â–µ, –∏ –º—ã –¥–µ–ª–∏–º Blueprint —Ç–∞–∫ –º–Ω–æ–≥–æ –≤–µ—â–µ–π, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –Ω–∞–º –ø—Ä–∏—Ö–æ–¥–∏–ª–æ—Å—å –∏–º–µ—Ç—å –¥–µ–ª–æ —Ä–∞–Ω—å—à–µ.

–û–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö –∫—Ä—É—Ç—ã—Ö –≤–µ—â–µ–π –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ —Ç–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ .createFromConfig –Ω–∞—à–µ–π –æ–±–µ—Ä—Ç–∫–∏, —á—Ç–æ–±—ã –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Å–æ–±–∏—Ä–∞–µ–º—Å—è —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤–º–µ—Å—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –º—ã –ø–µ—Ä–µ–¥–∞–µ–º –≤ –Ω–µ–≥–æ.

–ï—â–µ –¥–≤–µ –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Å–ª—É–∂–∏–≤–∞—é—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω—ã —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –æ–±—ä–µ–∫—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

–ö–∞–∫ –≤—ã –ø–æ–º–Ω–∏—Ç–µ, –Ω–∞—à–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - —Ç–µ–∫—É—â—É—é –≤—Å—Ç—Ä–µ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (–Ω–æ–º–µ—Ä), —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å (–∞–¥—Ä–µ—Å) –∏ –∞–¥—Ä–µ—Å "–≤–ª–∞–¥–µ–ª—å—Ü–∞" –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ - —Ç–æ—Ç, –∫—Ç–æ –º–æ–∂–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞.
–ü–æ—Ç–æ–º—É —á—Ç–æ –º—ã —Å–æ–±–∏—Ä–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ —Ü–µ–ø–æ—á–∫–µ - —è —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Å–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏ –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª–µ–π. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –º–Ω–µ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–∑–∂–µ.

–ê–¥—Ä–µ—Å —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∞–¥—Ä–µ—Å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –∞–¥—Ä–µ—Å–∞, –∫–∞–∫ –Ω–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º —Ç–∏–ø–∞ NetworkProvider, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è Blueprint –≤ —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—É—Å–∫–∞, –∫–æ–≥–¥–∞ Blueprint –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–∞—à —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è.

–í—Å–µ –≤–∞—à–∏ —Å–∫—Ä–∏–ø—Ç—ã –¥–æ–ª–∂–Ω—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—É—Å–∫–∞, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞–ª–∏ —Å Blueprint

–î–∞–≤–∞–π—Ç–µ –≤–µ—Ä–Ω–µ–º—Å—è –∫ –º–µ—Ç–æ–¥—É .sendDeploy –Ω–∞—à–µ–π –æ–±–µ—Ä—Ç–∫–∏ –Ω–∞ —Å–µ–∫—É–Ω–¥—É. –í—Å–≥–ª—è–Ω–∏—Ç–µ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–ª–∞. –í—ã –º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å, —á—Ç–æ –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —è—á–µ–π–∫—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ç–µ–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏—è. –ß—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è –ª–æ–≥–∏–∫–∏ –Ω–∞—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞, –µ—Å–ª–∏ —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∏–º–µ–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ - —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ, –¥–∞–∂–µ –µ—Å–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –±—É–¥–µ—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç. –í—ã —É–≤–∏–¥–∏—Ç–µ —Ç–∞–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–≥–Ω–æ–≤–µ–Ω–∏–π.
–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å –ø–æ–º–æ—â—å—é Blueprint
–î–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–π–¥–µ–º –∫ –∫–æ—Ä–Ω—é –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∑–∞–ø—É—Å—Ç–∏–º –∫–æ–º–∞–Ω–¥—É:

yarn blueprint run
–í—ã –æ–∂–∏–¥–∞–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å —á—Ç–æ-—Ç–æ –ø–æ–¥–æ–±–Ω–æ–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã:

markokhman$ yarn blueprint run

yarn run v1.22.11

? Choose file to use (Use arrow keys)
‚ùØ deploy
onchaintest

–í—ã —É–≤–∏–¥–∏—Ç–µ, —á—Ç–æ Blueprint –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤—ã–±—Ä–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Ö–æ—Ç–∏–º –∑–∞–ø—É—Å—Ç–∏—Ç—å. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –Ω–∞—Å –≤—Å–µ –µ—â–µ –µ—Å—Ç—å —Å–∫—Ä–∏–ø—Ç onchaintest.ts, –ø–æ—ç—Ç–æ–º—É –æ–Ω —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞–º –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ Blueprint —É–ª–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –∏–∑ –ø–∞–ø–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º—Å—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ —Ç–µ—Å—Ç—ã onchain, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≥–ª–∞–≤–µ –º—ã —Å–æ–±–∏—Ä–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∞—à–∏–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª scripts/onchaintest.ts.
–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π deploy.

–í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–µ—Ç—å —Å–µ–π—á–∞—Å:

markokhman$ yarn blueprint run
yarn run v1.22.11

? Choose file to use (Use arrow keys)
? Choose file to use deploy
? Which network do you want to use? (Use arrow keys)
‚ùØ mainnet
testnet
–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å testnet.

markokhman$ yarn blueprint run

yarn run v1.22.11

? Choose file to use (Use arrow keys)
? Choose file to use deploy
? Which network do you want to use?
? Which network do you want to use? testnet
? Which wallet are you using? (Use arrow keys)
‚ùØ TON Connect compatible mobile wallet (example: Tonkeeper)
Create a ton:// deep link
Tonhub wallet
Mnemonic
–¢–µ–ø–µ—Ä—å –≤–∞–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å, —Å –∫–∞–∫–∏–º –∫–æ—à–µ–ª—å–∫–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç. –í –≥–ª–∞–≤–µ 3 –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–æ—à–µ–ª–µ–∫ (TON Whales' Tonhub) –∏ —Å–∞–º—ã–º –ø—Ä–æ—Å—Ç—ã–º –æ–±—Ä–∞–∑–æ–º - —Å–æ–∑–¥–∞–≤–∞–ª–∏ –≥–ª—É–±–æ–∫—É—é —Å—Å—ã–ª–∫—É.

Blueprint –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ—à–µ–ª—å–∫–∏ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ —Å –ª—É—á—à–∏–º–∏ –≤ –∫–ª–∞—Å—Å–µ —Å–µ—Å—Å–∏—è–º–∏. –ê –∏–º–µ–Ω–Ω–æ, —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ –≤—ã —Ä–∞–∑—Ä–µ—à–∞–µ—Ç–µ —Å–≤–æ–µ–º—É –ª–æ–∫–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—É –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞, –∞ –∑–∞—Ç–µ–º —É—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –∏—Ö.

–î–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ –º—ã —Å–Ω–æ–≤–∞ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Tonhub –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∏.

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ Tonhub.
–í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –≤–∞—à–∏–º –∫–æ—à–µ–ª—å–∫–æ–º (–∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏).

–ü–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –≤–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Tonhub. –ö–æ–≥–¥–∞ –≤—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –≤—ã —É–≤–∏–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ:

–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–∑–Ω–∞–ª–∏ –µ—â–µ –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å–≤–æ–∏—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ :) –ò —ç—Ç–æ –¥–æ–≤–æ–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ.


Using Blueprint to deploy contracts
BitStake Capital CRYPTO
BitStake Capital CRYPTO

¬∑
Follow

7 min read
¬∑
May 9, 2024





üìöLecture Notes
As you remember, in the very begining of our FunC programming journey, we‚Äôve quickly noted that there is a great library/tool called Blueprint.

Blueprint is maintained by the TonTech team, officially supported by TON Foundation. We‚Äôve created our custom scripts from scratch in order to make sure that you completely understand what exactly happens under the hood in projects generated by Blueprint.

It‚Äôs even recommended to start every of your new projects with following command:

npm create ton@latest
This command will use Blueprint to generate a new project for you with code for all the phases that we went through in Chapter 3, while covering the contract development lifecycle.

In this chapter we are not going to slightly optimise our project‚Äôs setup, so it would work exactly like projects generated with Blueprint. Namely, we are going to slightly update our project in terms of compilation and deployment, so it would use components imported from Blueprint.

Delegating compilation process to Blueprint
First of all ‚Äî we will need to update our package.json file. From no on, we will only leave there one sript - test. We do this, because, as mentioned before, the compilation and deployment will be handled by components imported from Blueprint.

Scripts part of your package.json file will now look like this:

"scripts": {
    "test": "jest",
}
However, if we will run the yarn test command now - it will simply run tests on the contract without pre-compiling it. Let's fix that.

As I‚Äôve mentioned ‚Äî we will use compilation suite from Blueprint, so let‚Äôs install this amazing library:

yarn add @ton/blueprint --dev
In our tests/main.spec.ts file we have to make some important updates. This is how it was looking before (we quote here only the beginning part, before actual tests):

import { Cell, toNano } from "ton-core";
import { hex } from "../build/main.compiled.json";
import { Blockchain, SandboxContract, TreasuryContract } from "@ton/sandbox";
import { MainContract } from "../wrappers/MainContract";
import "@ton/test-utils";
describe("main.fc contract tests", () => {
  let blockchain: Blockchain;
  let myContract: SandboxContract<MainContract>;
  let initWallet: SandboxContract<TreasuryContract>;
  let ownerWallet: SandboxContract<TreasuryContract>;
  beforeEach(async () => {
    blockchain = await Blockchain.create();
    initWallet = await blockchain.treasury("initWallet");
    ownerWallet = await blockchain.treasury("ownerWallet");
    const codeCell = Cell.fromBoc(Buffer.from(hex, "hex"))[0];
    myContract = blockchain.openContract(
      await MainContract.createFromConfig(
        {
          number: 0,
          address: initWallet.address,
          owner_address: ownerWallet.address,
        },
        codeCell
      )
    );
  });


  // ... the rest of testing code
 }
We will make 3 updates to it:

Import compile function from @ton-blueprint library
Implement jest‚Äôs beforeAll hook to compile our code and provide a code cell to the rest of hooks and tests
Update the beforeEach hook to use the code cell provided by beforeAll hook.
This is how our code will transform after those changes are made:

// ...other library imports
import { compile } from "@ton/blueprint";
describe("main.fc contract tests", () => {
  let blockchain: Blockchain;
  let myContract: SandboxContract<MainContract>;
  let initWallet: SandboxContract<TreasuryContract>;
  let ownerWallet: SandboxContract<TreasuryContract>;
  let codeCell: Cell;
  beforeAll(async () => {
    codeCell = await compile("MainContract");
  });
  beforeEach(async () => {
    blockchain = await Blockchain.create();
    initWallet = await blockchain.treasury("initWallet");
    ownerWallet = await blockchain.treasury("ownerWallet");
    myContract = blockchain.openContract(
      await MainContract.createFromConfig(
        {
          number: 0,
          address: initWallet.address,
          owner_address: ownerWallet.address,
        },
        codeCell
      )
    );
  });

 // ... the rest of testing code
}
We are doing this changes so you would get used to code that would be generated in case you run npm create ton@latest. We are deligating the compilation process to the Blueprint library.

However, we will need to provide Blueprint with one more thing ‚Äî compiler config. To do so, simply create a new file in wrappers folder and call it MainContract.compile.ts. Here is the contents of this file:

import { CompilerConfig } from "@ton/blueprint";
export const compile: CompilerConfig = {
  targets: ["contracts/main.fc"],
};
At this point you can simply remove the compile scripts file (scripts/compile.ts) and run yarn test in the root of your project. You will see that our tests are now executing properly! Congratulations!

Delegating the deployment process to Blueprint
Next thing we need to do is to update our deploy script use Blueprint‚Äôs superpowers. Quick disclaimer ‚Äî we are going to use our wrapper MainContract and it‚Äôs method .createFromConfig. This way we can easily set the initial state of our contract before deploying it.

Blueprint is bringing amazing features for deployment. It is interactively asking us to choose network (testnet/mainnet) as well as type of wallet that we want to deploy our contract with. This functionality is very handy once you develop and deploy often.

One thing we need to do before updating our deploy script is to create a new method on our wrapper called sendDeploy. As you remember, we need to use a wrapper to interact with our contract. This is what our method‚Äôs code looks like:

async sendDeploy(provider: ContractProvider, via: Sender, value: bigint) {
    await provider.internal(via, {
      value,
      sendMode: SendMode.PAY_GAS_SEPARATELY,
      body: beginCell().endCell(),
    });
}
As you remember, deploying a contract is as simple as sending it‚Äôs initial data and code to it‚Äôs pre-determined address. In Chapter 3 we were composing this manually, so you would understand in depth how it works. Now, for sake of optimisation, we deligate this to our wrapper and Blueprint.

We will completely replace our code with new, so it would comply with Blueprint‚Äôs functionality.

Here is how our scripts/deploy.ts looks like now:

import { address, toNano } from "ton-core";
import { MainContract } from "../wrappers/MainContract";
import { compile, NetworkProvider } from "@ton/blueprint";
export async function run(provider: NetworkProvider) {
  const myContract = MainContract.createFromConfig(
    {
      number: 0,
      address: address("kQDU69xgU6Mj-iNDHYsWWuNx7yRPQC_bNZNCpq5yVc7LiE7D"),
      owner_address: address(
        "kQDU69xgU6Mj-iNDHYsWWuNx7yRPQC_bNZNCpq5yVc7LiE7D"
      ),
    },
    await compile("MainContract")
  );
  const openedContract = provider.open(myContract);
  openedContract.sendDeploy(provider.sender(), toNano("0.05"));
  await provider.waitForDeploy(myContract.address);
}
As you can see ‚Äî it is much simpler and we are deligating Blueprint so many things that we had to deal with before.

One of coolest things is that now we can use the same .createFromConfig method of our wrapper to initiate the contract that we are going to deploy along with the initial state data via config object that we pass into it.

Two more things worth of explanations are related to the contents of the config object.

As you remember, our initial data of the contract has to have three params ‚Äî current counter value (number), the most recent sender (address) and contract‚Äôs ‚Äúowner‚Äù address ‚Äî the one who is able to withdraw funds. Because we are going to use this contract on-chain ‚Äî I‚Äôve set my real testnet address for both fields. This will enable me to withdraw funds later on.
function address is helping us to parse a string address into a proper type of Address as our config requests
Core deploy functionality is handled by provider of type NetworkProvider that is passed by Blueprint into the run function when Blueprint is triggering our deploy script.

All your scripts have to export run function if you want them to work with Blueprint

Let‚Äôs jump back to .sendDeploy method of our wrapper for a second. Have a look at body param. You can see that we are sending an empty cell as message body. As of the logic of our contract, if the message body has no operation code set to it ‚Äî the message will be bounced even though the contract will be successfully deployed. You will see this behaviour in a few moments.

Deploying contract with help of Blueprint
Let‚Äôs get to the root of our project and run a command:

yarn blueprint run
You would expect to see something like this in it after running this command:

markokhman$ yarn blueprint run
yarn run v1.22.11
? Choose file to use (Use arrow keys)
‚ùØ deploy
  onchaintest
You will see that Blueprint is prompting us via command line to choose the script we want to run. At this moment we still have script onchaintest.ts, so it‚Äôs also offered to us for execution as Blueprint is catching all available scripts from scripts folder. We are not going to create any onchain tests at the moment, because in next chapter we are going to create real web interface for interacting with our contract. You can simply remove file scripts/onchaintest.ts for now.

Choose script deploy.

You will be prompted to choose network now:

markokhman$ yarn blueprint run
yarn run v1.22.11
? Choose file to use (Use arrow keys)
? Choose file to use deploy
? Which network do you want to use? (Use arrow keys)
‚ùØ mainnet
  testnet
Choose network testnet.

markokhman$ yarn blueprint run
yarn run v1.22.11
? Choose file to use (Use arrow keys)
? Choose file to use deploy
? Which network do you want to use?
? Which network do you want to use? testnet
? Which wallet are you using? (Use arrow keys)
‚ùØ TON Connect compatible mobile wallet (example: Tonkeeper)
  Create a ton:// deep link
  Tonhub wallet
  Mnemonic
Now you‚Äôre prompted to choose which wallet you would like to deploy your contract with. In Chapter 3 we were using only one wallet (TON Whales‚Äô Tonhub) and in the most simple manner ‚Äî creating a deep link.

Blueprint enables you to use any type of wallets with best in class sessions keeping. Namely, it works in a way that you are authorizing your local project to request transactions from your wallet and then approve them.

For this tutorial we are going to use Tonhub for testnet and mainnet again.

Tonhub wallet app.

You will be asked to scan the QR code and authorize your app to interact with your wallet (request transactions).

markokhman$ yarn blueprint run
yarn run v1.22.11
? Choose file to use (Use arrow keys)
? Choose file to use deploy
? Which network do you want to use? (Use arrow keys)
? Which network do you want to use? mainnet
? Which wallet are you using?
? Which wallet are you using? Tonhub wallet
ton://connect/GzhvQ-zwLhYNxzlEPEf-hP63kgR_0_O8vXsM8mSqQ-0?endpoint=connect.tonhubapi.com
Connected to wallet at address: EQC7zjln0_fghMQg0A-ZhYFar3DU1bDW9A4Vi5Go5uu-tAHe

After scanning the QR code and authorizing in your app ‚Äî you will be requested to sign a transaction inside of the Tonhub application. When done ‚Äî you will see following output in command line:

markokhman$ yarn blueprint run
yarn run v1.22.11
? Choose file to use (Use arrow keys)
? Choose file to use deploy
? Which network do you want to use?
? Which network do you want to use? testnet
? Which wallet are you using?
? Which wallet are you using? Tonhub wallet
Connected to wallet at address: EQDU69xgU6Mj-iNDHYsWWuNx7yRPQC_bNZNCpq5yVc7LiPVJ
Contract deployed at address EQCS7PUYXVFI-4uvP1_vZsMVqLDmzwuimhEPtsyQKIcdeNPu
You can view it at https://testnet.tonscan.org/address/EQCS7PUYXVFI-4uvP1_vZsMVqLDmzwuimhEPtsyQKIcdeNPu
‚ú®  Done in 19.84s.
Congratulations! You‚Äôve learned one more way to deploy your contracts :) And it‚Äôs quite an effecient one.