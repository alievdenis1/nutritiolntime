Book
Deployment
Deploy
Tact Deployer is a small library that integrates with TON Verifier that allows you to deploy your contracts safely using your favorite wallet without needing to manage keys or deploy contracts manually. Tact Deployer also automatically verifies your contract's source code and you can be sure that your compiler is not compromised.

Requirements
Your contract MUST have the Deployer trait from the @stdlib/deploy package to be able to use Tact Deployer.

Installation
To add Tact Deployer to your project, just use yarn:

yarn add @tact-lang/deployer

How to use
When you build your smart contracts using Tact, it produces a package (*.pkg) file that has all the required information about the built smart contract. To deploy your smart contract, you need to create a deployer instance, pass your package file to it and provide initial data for your contract.

import * as fs from 'fs';
import * as path from 'path';
import { Address, contractAddress } from "ton";
import { SampleTactContract } from "./output/sample_SampleTactContract";
import { prepareTactDeployment } from "@tact-lang/deployer";

// Parameters
let testnet = true;                                 // Flag for testnet or mainnet
let packageName = 'sample_SampleTactContract.pkg';  // Name of your package to deploy
let outputPath = path.resolve(__dirname, 'output'); // Path to output directory
let owner = Address.parse('<put_address_here>');    // Our sample contract has an owner
let init = await SampleTactContract.init(owner);    // Create initial data for our contract

// Calculations
let address = contractAddress(0, init);     // Calculate contract address. MUST match with the address in the verifier
let data = init.data.toBoc();               // Create init data
let pkg = fs.readFileSync(                  // Read package file
    path.resolve(outputPath, packageName)
);

// Prepare deploy
let link = await prepareTactDeployment({ pkg, data, testnet });

// Present a deployment link and contract address
console.log('Address: ' + address.toString({ testOnly: testnet }));
console.log('Deploy link: ' + link);

After following this link you will be able to deploy and verify your smart contract.

Blueprint
A development environment for TON blockchain for writing, testing, and deploying smart contracts.

Table of Contents
Quick start
Overview
Core features
Tech stack
Requirements
Features overview
Project creation
Directory structure
Building contracts
Running the test suites
Deploying contracts
Custom scripts
Contract development
Creating contracts
Writing contract code
Testing contracts
Configuration
Plugins
Custom network
Contributors
License
Donations
Quick start ðŸš€
Run the command in terminal to create a new project and follow the on-screen instructions:

npm create ton@latest
Overview
Blueprint is an all-in-one development environment designed to enhance the process of creating, testing, and deploying smart contracts on TON blockchain using FunC and Tact languages

Core features
Create a development environment from template - npm create ton@latest
Streamlined workflow for building, testing and deploying smart contracts
Dead simple deployment to mainnet/testnet using your favorite wallet (eg. Tonkeeper)
Blazing fast testing of multiple smart contracts in an isolated blockchain running in-process
Tech stack
Compiling FunC with https://github.com/ton-community/func-js
Compiling Tact with https://github.com/tact-lang/tact
Testing smart contracts with https://github.com/ton-org/sandbox
Deploying smart contracts with TON Connect 2, Tonhub wallet or a ton:// deeplink
Requirements
Node.js with a recent version like v18. Version can be verified with node -v
IDE with TON support:
Visual Studio Code with the FunC plugin
IntelliJ IDEA with the TON Development plugin
Features overview
Project creation
Run and follow the on-screen instructions:   npm create ton@latest   or   npx create-ton@latest
From the project directory run   npm/yarn install   to install dependencies
Directory structure
contracts/ - Source code in FunC or Tact for all smart contracts and their imports
wrappers/ - TypeScript interface classes for all contracts (implementing Contract from @ton/core)
include message [de]serialization primitives, getter wrappers and compilation functions
used by the test suite and client code to interact with the contracts from TypeScript
compilables/ - Compilations scripts for contracts
tests/ - TypeScript test suite for all contracts (relying on Sandbox for in-process tests)
scripts/ - Deployment scripts to mainnet/testnet and other scripts interacting with live contracts
build/ - Compilation artifacts created here after running a build command
Building contracts
You need a compilation script in compilables/<CONTRACT>.compile.ts - example
Run interactive:    npx blueprint build   or   yarn blueprint build
Non-interactive:   npx/yarn blueprint build <CONTRACT>   OR build all contracts   yarn blueprint build --all
Example: yarn blueprint build counter
Build results are generated in build/<CONTRACT>.compiled.json
Tact generated files are located in build/<CONTRACT> directory
Running the test suites
Run in terminal:   npx blueprint test   or   yarn blueprint test
Alternative method:   npm test   or   yarn test
You can specify test file to run:   npm/yarn test <CONTRACT>
Example: yarn test counter
Learn more about writing tests from the Sandbox's documentation - here.

Deploying contracts
You need a deployment script in scripts/deploy<CONTRACT>.ts - example
Run interactive:    npx blueprint run   or   yarn blueprint run
Non-interactive:   npx/yarn blueprint run deploy<CONTRACT> --<NETWORK> --<DEPLOY_METHOD>
Example: yarn blueprint run deployCounter --mainnet --tonconnect
Custom scripts
Custom scripts should be located in scripts folder
Script file must have exported function run
export async function run(provider: NetworkProvider) {
  //
}
Script can be run using npx/yarn blueprint run <SCRIPT> command
Updating FunC version
FunC version can be updated using npx/yarn blueprint set func command

Help and additional commands
Run in terminal:   npx blueprint help   or   yarn blueprint help

Contract development
Before developing, make sure that your current working directory is located in the root of the project created using npm create ton@latest

Creating contracts
Run interactive:    npx blueprint create   or   yarn blueprint create
Non-interactive:   npx/yarn blueprint create <CONTRACT> --type <TYPE> (type can be func-empty, func-counter, tact-empty, tact-counter)
Example: yarn blueprint create MyNewContract --type func-empty
Writing contract code
FunC
Implement the standalone FunC root contract in contracts/<CONTRACT>.fc
Implement shared FunC imports (if breaking code to multiple files) in contracts/imports/*.fc
Implement wrapper TypeScript class in wrappers/<CONTRACT>.ts to encode messages and decode getters
Tact
Implement tact contract in contracts/<CONTRACT>.tact
Wrappers will be automatically generated in build/<CONTRACT>/tact_<CONTRACT>.ts
Testing contracts
Implement TypeScript tests in tests/<CONTRACT>.spec.ts
Rely on the wrapper TypeScript class from wrappers/<CONTRACT>.ts to interact with the contract
Learn more about writing tests from the Sandbox's documentation - here.

Configuration
A config may be created in order to control some of blueprint's features. If a config is needed, create a blueprint.config.ts file in the root of your project with something like this:

import { Config } from '@ton/blueprint';

export const config: Config = {
    // config contents
};
It is important that the config is exported, is named config, and is not default exported.

Config's features are explained below.

Plugins
Blueprint has a plugin system to allow the community to develop their own additions for the ecosystem without the need to change blueprint's code.

In order to use plugins, add a plugins array to your config:

import { Config } from '@ton/blueprint';
import { ScaffoldPlugin } from 'blueprint-scaffold';

export const config: Config = {
    plugins: [new ScaffoldPlugin()],
};
(This example shows how to add the scaffold plugin)

Here are some of the plugins developed by the community:

scaffold - allows developers to quickly create a simple dapp automatically using the wrappers' code
Custom network
A custom network may be specified by using the --custom flags, which you can read about by running blueprint help run, but it can be tiresome to use these at all times. Instead, to specify a custom network to always be used (unless --custom flags are present), add a network object to your config:

import { Config } from '@ton/blueprint';

export const config: Config = {
    network: {
        endpoint: 'https://toncenter.com/api/v2/jsonRPC',
        type: 'mainnet',
        version: 'v2',
        key: 'YOUR_API_KEY',
    },
};
The above config parameters are equivalent to the arguments in the following command:

npx blueprint run --custom https://toncenter.com/api/v2/jsonRPC --custom-version v2 --custom-type mainnet --custom-key YOUR_API_KEY
Properties of the network object have the same semantics as the --custom flags with respective names (see blueprint help run).

You can also use custom network to verify contracts, like so:

npx blueprint verify --custom https://toncenter.com/api/v2/jsonRPC --custom-version v2 --custom-type mainnet --custom-key YOUR_API_KEY
(or similarly using the config), however custom type MUST be specified as either mainnet or testnet when verifying.

