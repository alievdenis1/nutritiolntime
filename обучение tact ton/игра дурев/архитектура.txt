Детальные механики MVP:

Инициализация игрока:

При первом взаимодействии создается профиль игрока
Начальные характеристики: Репутация (10), Энергия (100), Здоровье (100), Навыки разработчика (10)
Начальный баланс: 100 POVEL DUREV (бонус за регистрацию)


Ежедневные действия:

Игрок может выполнить до 5 действий в день
Типы действий:
a) Разработка (улучшает Навыки разработчика, тратит Энергию)
b) Нетворкинг (улучшает Репутацию, тратит Энергию)
c) Отдых (восстанавливает Здоровье и Энергию)
Каждое действие стоит 10 POVEL DUREV
Действия сбрасываются в 00:00 UTC


Улучшения:

Доступно 5 улучшений:
a) Курсы программирования (+5 к Навыкам разработчика, стоит 50 POVEL DUREV)
b) PR-тренинг (+5 к Репутации, стоит 50 POVEL DUREV)
c) Спортзал (+10 к максимальному Здоровью, стоит 100 POVEL DUREV)
d) Энергетик (+10 к максимальной Энергии, стоит 100 POVEL DUREV)
e) Найм ассистента (+1 дополнительное действие в день, стоит 200 POVEL DUREV)
Каждое улучшение можно купить только один раз


Еженедельное событие "Запуск проекта":

Каждый понедельник в 12:00 UTC
Игроки могут участвовать, если Навыки разработчика >= 20
Стоимость участия: 50 POVEL DUREV
Шанс на успех = (Навыки разработчика + Репутация) / 2
При успехе: +50 Репутации, 200 POVEL DUREV
При неудаче: -10 Репутации


Система рейтинга:

Рейтинг = Репутация + (Навыки разработчика / 2)
Обновляется после каждого действия игрока
Топ-100 игроков отображаются в таблице лидеров


Еженедельное распределение призов:

Каждое воскресенье в 23:59 UTC
Призовой фонд:
70% от всех потраченных за неделю POVEL DUREV
Распределение:
60% - топ-10 игрокам по рейтингу
15% - сжигается
15% - отправляется разработчикам
10% - переносится на следующую неделю


Механика "Восстановление":

Если Здоровье или Энергия падает до 0, игрок не может выполнять действия
Восстановление: 10 единиц каждые 6 часов или мгновенно за 20 POVEL DUREV



Теперь, основываясь на этих механиках, разработаем архитектуру смарт-контрактов:

Основной контракт игры (GameMaster):

Управление игроками и их характеристиками
Обработка ежедневных действий
Управление улучшениями
Проведение еженедельного события "Запуск проекта"
Расчет и обновление рейтинга
Распределение еженедельных призов


Контракт токена POVEL DUREV (существующий):

Адрес: EQB02DJ0cdUD4iQDRbBv4aYG3htePHBRK1tGeRtCnatescK0
Стандартные функции Jetton (перевод, баланс и т.д.)


Контракт игрока (PlayerWallet):

Хранение баланса POVEL DUREV игрока
Обработка транзакций игрока (покупка улучшений, выполнение действий)
Взаимодействие с основным контрактом игры



Структура контрактов:

GameMaster:
typescriptCopycontract GameMaster {
  owner: Address;
  players: map<Address, PlayerData>;
  upgrades: map<Int, UpgradeData>;
  weeklyPool: Int;
  lastWeeklyDistribution: Int;

  struct PlayerData {
    reputation: Int as uint16;
    energy: Int as uint8;
    health: Int as uint8;
    devSkills: Int as uint8;
    lastActionTime: Int as uint32;
    actionsToday: Int as uint8;
    upgrades: map<Int, Bool>;
  }

  struct UpgradeData {
    name: String;
    cost: Int as coins;
    effect: String;
  }

  // Инициализация игрока
  receive("register") {
    // Логика регистрации
  }

  // Обработка ежедневных действий
  receive("action") {
    // Логика выполнения действий
  }

  // Покупка улучшений
  receive("buyUpgrade") {
    // Логика покупки улучшений
  }

  // Еженедельное событие
  receive("launchProject") {
    // Логика запуска проекта
  }

  // Распределение призов
  receive("distributeRewards") {
    // Логика распределения призов
  }

  // Геттеры
  get fun getPlayerData(address: Address): PlayerData
  get fun getLeaderboard(): map<Address, Int>
  get fun getWeeklyPool(): Int
}

PlayerWallet:
typescriptCopycontract PlayerWallet {
  owner: Address;
  gameMaster: Address;
  balance: Int as coins;

  // Пополнение баланса
  receive("deposit") {
    // Логика пополнения
  }

  // Выполнение действия
  receive("performAction") {
    // Проверка баланса и отправка в GameMaster
  }

  // Покупка улучшения
  receive("purchaseUpgrade") {
    // Проверка баланса и отправка в GameMaster
  }

  // Геттеры
  get fun getBalance(): Int
}


Взаимодействие контрактов:

При регистрации игрока создается новый PlayerWallet, связанный с адресом игрока.
Все действия игрока проходят через PlayerWallet, который проверяет баланс и отправляет транзакции в GameMaster.
GameMaster обрабатывает логику игры и обновляет данные игрока.
Еженедельное распределение призов инициируется владельцем GameMaster и взаимодействует с контрактом POVEL DUREV для отправки наград.

Эта архитектура обеспечивает:

Разделение ответственности между контрактами
Эффективное управление балансами игроков
Централизованную логику игры в GameMaster
Масштабируемость для будущих обновлений

При реализации следует уделить особое внимание безопасности, оптимизации газа и обработке ошибок.
Также рекомендуется реализовать механизм обновления контрактов для возможности улучшения игры в будущем.